option-trace=true;

machine EcoSim {

    // Room states
    enum{BELOW, TARGET, ABOVE} smallRoomState;
    enum{BELOW, TARGET, ABOVE} mediumRoomState;
    enum{BELOW, TARGET, ABOVE} largeRoomState;
    // System states
    enum{ON, OFF} heatingState;
    enum{ON, OFF} lightsState1;
    enum{ON, OFF} lightsState2;
    enum{ON, OFF} applianceState1;
    enum{ON, OFF} applianceState2;
    // State variables
    real globalTime = 0;
    real lightsTimeOn1 = 0;
    real lightsTimeOff1 = 0;
    real lightsTimeOn2 = 0;
    real lightsTimeOff2 = 0;
    real applianceTimeOn1 = 0;
    real applianceTimeOff1 = 0;
    real applianceTimeOn2 = 0;
    real applianceTimeOff2 = 0;
    real energyUsed = 0;
    // Adjustable User settings
    real timeStep = 30;
    const real tempTolerance = 0.6;
    // Entry variables
    real rValue = 0;
    real occupancyMultiplier = 0;
    real buildingSize = 0;
    real heatingEnergyUnit = 0;
    real lightingEnergyUnit = 0;
    real outsideTemp = 0;
    real applianceEnergyUnit = 0;
    // Target temperatures
    const real smallRoomTarget = 20;
    const real mediumRoomTarget = 20.5;
    const real largeRoomTarget = 21;
    // Current temperatures
    real currentTempSmallRoom = 19;
    real currentTempMediumRoom = 18;
    real currentTempLargeRoom = 17;
    // Heating rates - Represent the size of the room and the rate at which it natually heats
    const real heatingRateSmallRoom = 0.66;
    const real heatingRateMediumRoom = 1;
    const real heatingRateLargeRoom = 1.3;
    // Cooling rates - Represent the size of the room and the rate at which it natually cools
    const real coolingRateSmallRoom = 0.66;
    const real coolingRateMediumRoom = 1;
    const real coolingRateLargeRoom = 1.3;

    //                                      **********FUNCTIONS**********

    // Time
    function incrementGlobalTime:real(increment:real, globalTime:real) {
        return globalTime + increment;  // Time increment
    }
    function decrementGlobalTime:real(decrement:real, globalTime:real) {
        return globalTime - decrement;
    }
    // Heating
    function heatRoom:real(currentTemp:real, rate:real, rValue: real, outsideTemp: real, timeStep: real) {
    real tempDiff = currentTemp - outsideTemp;  // Find Temperature difference
    real heatGain = (rate * rValue) * (1 - (tempDiff / 100));  // Adjusted heating rate based on temperature difference
    return currentTemp + (heatGain * timeStep / 60);  // Increase temperature over timeStep
    }
    // Cooling
    function coolRoom:real(currentTemp:real, rate:real, rValue: real, outsideTemp: real, timeStep: real) {
    real tempDiff = outsideTemp - currentTemp;  
    real coolRate = (rate * rValue) * (1 - (tempDiff / 100));  
    return currentTemp - (coolRate * timeStep / 60);  
    }

    // Lighting
    function calculateLightEnergy:real(onTime:real, offTime:real) {
        return (((offTime - onTime) / timeStep) * lightingEnergyUnit); // Find how long light was on * rate of energy unit
    }
    // Appliances 
    function calculateApplianceEnergy:real(onTime:real,offTime:real) {
        return (((offTime - onTime) / timeStep) * applianceEnergyUnit);
    }
    // Energy Usage
    function updateEnergyUsage:real(energyUsed:real, energyType:real) {
        return energyUsed + energyType;
    }
    //                                      ********** States **********

    // ENTRY NODES
    normal start state entry {}
    // BUILDING SIZE
    normal state smallBuilding {
        buildingSize = 1.0;
    }
    normal state mediumBuilding {
        buildingSize = 2.0;
    }
    normal state largeBuilding {
        buildingSize = 3.0;
    }
    // INSULATION
    normal state lowInsulation {
        rValue = 0.7;
    }
    normal state medInsulation {
        rValue = 1.0;
    }
    normal state hiInsulation {
        rValue = 1.3;
    }
    // OCCUPANCY 
    normal state lowOccupancy {
        occupancyMultiplier = 1 * buildingSize;
    }
    normal state medOccupancy {
        occupancyMultiplier = 2 * buildingSize;
    }
    normal state hiOccupancy {
        occupancyMultiplier = 3 * buildingSize;
    }
    // HEATING
    normal state electricHeating {
        heatingEnergyUnit = 1.5 / (60 / timeStep);
    }
    normal state gasHeating {
        heatingEnergyUnit = 1.2 / (60 / timeStep);
    }
    normal state pumpHeating {
        heatingEnergyUnit = 0.4286 / (60 / timeStep);
    }
    // LIGHTING
    normal state CFL {
        lightingEnergyUnit = (0.015 * 4) / (60 / timeStep);
    }
    normal state LED {
        lightingEnergyUnit = (0.01 * 4) / (60 / timeStep);
    }
    normal state LCD {
        lightingEnergyUnit = (0.02 * 4) / (60 / timeStep);
    }
    // OUTDOOR TEMP
    normal state hot {
        outsideTemp = 30;
    }
    normal state mild {
        outsideTemp = 15;
    }
    normal state cold {
        outsideTemp = 5;
    }
    // APPLIANCES
    normal state lowUsage {
        applianceEnergyUnit = 0.5 / (60 / timeStep);
    }
    normal state medUsage {
        applianceEnergyUnit = 1.0 / (60 / timeStep);
    }
    normal state hiUsage {
        applianceEnergyUnit = 1.5 / (60 / timeStep);
    }

    normal state INIT { // Initialise ENUMS
        heatingState = #OFF;
        lightsState1 = #OFF;
        lightsState2 = #OFF;
        applianceState1 = #OFF;
        applianceState2 = #OFF;
        smallRoomState = #BELOW;
        mediumRoomState = #BELOW;
        largeRoomState = #BELOW;
    }

    normal state base {
        globalTime = incrementGlobalTime(timeStep, globalTime); // Increment Time
    }

    // HEATING
    normal state heatingOn {
        heatingState = #ON; // Set ENUM to ON
    }

    normal state heating {
        smallRoomState = #BELOW;
        mediumRoomState = #BELOW;
        largeRoomState = #BELOW;
        globalTime = incrementGlobalTime(timeStep, globalTime);
        energyUsed = updateEnergyUsage(energyUsed, heatingEnergyUnit);
        // Heat all sized rooms
        currentTempSmallRoom = heatRoom(currentTempSmallRoom, heatingRateSmallRoom, rValue, outsideTemp, timeStep);
        currentTempMediumRoom = heatRoom(currentTempMediumRoom, heatingRateMediumRoom, rValue, outsideTemp, timeStep);
        currentTempLargeRoom = heatRoom(currentTempLargeRoom, heatingRateLargeRoom, rValue, outsideTemp, timeStep);
    }

    normal state h1 {
        smallRoomState = #TARGET;
        mediumRoomState = #BELOW;
        largeRoomState = #BELOW;
        globalTime = incrementGlobalTime(timeStep, globalTime);
        energyUsed = updateEnergyUsage(energyUsed, heatingEnergyUnit);

        currentTempSmallRoom = heatRoom(currentTempSmallRoom, heatingRateSmallRoom, rValue, outsideTemp, timeStep);
        currentTempMediumRoom = heatRoom(currentTempMediumRoom, heatingRateMediumRoom, rValue, outsideTemp, timeStep);
        currentTempLargeRoom = heatRoom(currentTempLargeRoom, heatingRateLargeRoom, rValue, outsideTemp, timeStep);
    }

    normal state h2 {
        smallRoomState = #ABOVE;
        mediumRoomState = #TARGET;
        largeRoomState = #BELOW;
        globalTime = incrementGlobalTime(timeStep, globalTime);
        energyUsed = updateEnergyUsage(energyUsed, heatingEnergyUnit);

        currentTempSmallRoom = heatRoom(currentTempSmallRoom, heatingRateSmallRoom, rValue, outsideTemp, timeStep);
        currentTempMediumRoom = heatRoom(currentTempMediumRoom, heatingRateMediumRoom, rValue, outsideTemp, timeStep);
        currentTempLargeRoom = heatRoom(currentTempLargeRoom, heatingRateLargeRoom, rValue, outsideTemp, timeStep);
    }

    normal state h3 {
        smallRoomState = #ABOVE;
        mediumRoomState = #ABOVE;
        largeRoomState = #TARGET;
        globalTime = incrementGlobalTime(timeStep, globalTime);
        energyUsed = updateEnergyUsage(energyUsed, heatingEnergyUnit);

        currentTempSmallRoom = heatRoom(currentTempSmallRoom, heatingRateSmallRoom, rValue, outsideTemp, timeStep);
        currentTempMediumRoom = heatRoom(currentTempMediumRoom, heatingRateMediumRoom, rValue, outsideTemp, timeStep);
        currentTempLargeRoom = heatRoom(currentTempLargeRoom, heatingRateLargeRoom, rValue, outsideTemp, timeStep);
    }

    normal state h4 {
        smallRoomState = #ABOVE;
        mediumRoomState = #ABOVE;
        largeRoomState = #ABOVE;
        globalTime = incrementGlobalTime(timeStep, globalTime);
        energyUsed = updateEnergyUsage(energyUsed, heatingEnergyUnit);

        currentTempSmallRoom = heatRoom(currentTempSmallRoom, heatingRateSmallRoom, rValue, outsideTemp, timeStep);
        currentTempMediumRoom = heatRoom(currentTempMediumRoom, heatingRateMediumRoom, rValue, outsideTemp, timeStep);
        currentTempLargeRoom = heatRoom(currentTempLargeRoom, heatingRateLargeRoom, rValue, outsideTemp, timeStep);
    }

    normal state heatingOff {
        heatingState = #OFF;
    }

    // COOLING
    normal state c1 {
        smallRoomState = #TARGET;
        mediumRoomState = #BELOW;
        largeRoomState = #BELOW;
        globalTime = incrementGlobalTime(timeStep, globalTime);

        currentTempSmallRoom = coolRoom(currentTempSmallRoom, coolingRateSmallRoom, rValue, outsideTemp, timeStep);
        currentTempMediumRoom = coolRoom(currentTempMediumRoom, coolingRateMediumRoom, rValue, outsideTemp, timeStep);
        currentTempLargeRoom = coolRoom(currentTempLargeRoom, coolingRateLargeRoom, rValue, outsideTemp, timeStep);
    }

    normal state c2 {
        smallRoomState = #ABOVE;
        mediumRoomState = #TARGET;
        largeRoomState = #BELOW;
        globalTime = incrementGlobalTime(timeStep, globalTime);

        currentTempSmallRoom = coolRoom(currentTempSmallRoom, coolingRateSmallRoom, rValue, outsideTemp, timeStep);
        currentTempMediumRoom = coolRoom(currentTempMediumRoom, coolingRateMediumRoom, rValue, outsideTemp, timeStep);
        currentTempLargeRoom = coolRoom(currentTempLargeRoom, coolingRateLargeRoom, rValue, outsideTemp, timeStep);
    }

    normal state c3 {
        smallRoomState = #ABOVE;
        mediumRoomState = #ABOVE;
        largeRoomState = #TARGET;
        globalTime = incrementGlobalTime(timeStep, globalTime);

        currentTempSmallRoom = coolRoom(currentTempSmallRoom, coolingRateSmallRoom, rValue, outsideTemp, timeStep);
        currentTempMediumRoom = coolRoom(currentTempMediumRoom, coolingRateMediumRoom, rValue, outsideTemp, timeStep);
        currentTempLargeRoom = coolRoom(currentTempLargeRoom, coolingRateLargeRoom, rValue, outsideTemp, timeStep);
    }

    normal state c4 {
        smallRoomState = #ABOVE;
        mediumRoomState = #ABOVE;
        largeRoomState = #ABOVE;
        globalTime = incrementGlobalTime(timeStep, globalTime);

        currentTempSmallRoom = coolRoom(currentTempSmallRoom, coolingRateSmallRoom, rValue, outsideTemp, timeStep);
        currentTempMediumRoom = coolRoom(currentTempMediumRoom, coolingRateMediumRoom, rValue, outsideTemp, timeStep);
        currentTempLargeRoom = coolRoom(currentTempLargeRoom, coolingRateLargeRoom, rValue, outsideTemp, timeStep);
    }

    // LIGHTS / APPLIANCES
    normal state lightsOn1 {
        lightsState1 = #ON;
        lightsTimeOn1 = globalTime - timeStep;
        globalTime = decrementGlobalTime(timeStep, globalTime); // Decrement time so as to cancel out time progression for turning on light/appliance
    }

    normal state lightsOff1 {
        lightsState1 = #OFF;
        lightsTimeOff1 = globalTime;
        // Calculate difference between time on and off, multiply by rate of occupancy and update energy usage
        energyUsed = updateEnergyUsage(energyUsed, calculateLightEnergy(lightsTimeOn1, lightsTimeOff1)) * occupancyMultiplier;
        globalTime = decrementGlobalTime(timeStep, globalTime); 
    }

    normal state lightsOn2 {
        lightsState2 = #ON;
        lightsTimeOn2 = globalTime - timeStep;
        globalTime = decrementGlobalTime(timeStep, globalTime); 
    }

    normal state lightsOff2 {
        lightsState2 = #OFF;
        lightsTimeOff2 = globalTime;
        energyUsed = updateEnergyUsage(energyUsed, calculateLightEnergy(lightsTimeOn2, lightsTimeOff2)) * occupancyMultiplier;
        globalTime = decrementGlobalTime(timeStep, globalTime); 
    }
    normal state applianceOn1 {
        applianceState1 = #ON;
        applianceTimeOn1 = globalTime - timeStep;
        globalTime = decrementGlobalTime(timeStep, globalTime); 
    }

    normal state applianceOff1 {
        applianceState1 = #OFF;
        applianceTimeOff1 = globalTime;
        energyUsed = updateEnergyUsage(energyUsed, calculateLightEnergy(applianceTimeOn1, applianceTimeOff1)) * occupancyMultiplier;
        globalTime = decrementGlobalTime(timeStep, globalTime); 
    }
    normal state applianceOn2 {
        applianceState2 = #ON;
        applianceTimeOn2 = globalTime - timeStep;
        globalTime = decrementGlobalTime(timeStep, globalTime); 
    }

    normal state applianceOff2 {
        applianceState2 = #OFF;
        applianceTimeOff2 = globalTime;
        energyUsed = updateEnergyUsage(energyUsed, calculateLightEnergy(applianceTimeOff2, applianceTimeOff2)) * occupancyMultiplier;
        globalTime = decrementGlobalTime(timeStep, globalTime); 
    }

    //                                      ********** INIT **********

    // Transitions from entry through configuration nodes
    trans z0 { entry -> smallBuilding }
    trans z1 { entry -> mediumBuilding }
    trans z2 { entry -> largeBuilding }

    trans x0 { smallBuilding -> lowInsulation }
    trans x1 { mediumBuilding -> lowInsulation }
    trans x2 { largeBuilding -> lowInsulation }
    trans x3 { smallBuilding -> medInsulation }
    trans x4 { mediumBuilding -> medInsulation }
    trans x5 { largeBuilding -> medInsulation }
    trans x6 { smallBuilding -> hiInsulation }
    trans x7 { mediumBuilding -> hiInsulation }
    trans x8 { largeBuilding -> hiInsulation }

    trans y0 { lowInsulation -> lowOccupancy }
    trans y1 { lowInsulation -> medOccupancy }
    trans y2 { lowInsulation -> hiOccupancy }
    trans y3 { medInsulation -> lowOccupancy }
    trans y4 { medInsulation -> medOccupancy }
    trans y5 { medInsulation -> hiOccupancy }
    trans y6 { hiInsulation -> lowOccupancy }
    trans y7 { hiInsulation -> medOccupancy }
    trans y8 { hiInsulation -> hiOccupancy }

    trans w0 { lowOccupancy -> electricHeating }
    trans w1 { lowOccupancy -> gasHeating }
    trans w2 { lowOccupancy -> pumpHeating }
    trans w3 { medOccupancy -> electricHeating }
    trans w4 { medOccupancy -> gasHeating }
    trans w5 { medOccupancy -> pumpHeating }
    trans w6 { hiOccupancy -> electricHeating }
    trans w7 { hiOccupancy -> gasHeating }
    trans w8 { hiOccupancy -> pumpHeating }

    trans v0 { electricHeating -> CFL }
    trans v1 { electricHeating -> LED }
    trans v2 { electricHeating -> LCD }
    trans v3 { gasHeating -> CFL }
    trans v4 { gasHeating -> LED }
    trans v5 { gasHeating -> LCD }
    trans v6 { pumpHeating -> CFL }
    trans v7 { pumpHeating -> LED }
    trans v8 { pumpHeating -> LCD }

    trans u0 { CFL -> hot }
    trans u1 { CFL -> mild }
    trans u2 { CFL -> cold }
    trans u3 { LED -> hot }
    trans u4 { LED -> mild }
    trans u5 { LED -> cold }
    trans u6 { LCD -> hot }
    trans u7 { LCD -> mild }
    trans u8 { LCD -> cold }

    trans q0 { hot -> lowUsage}
    trans q1 { hot -> medUsage}
    trans q2 { hot -> hiUsage}
    trans q3 { mild -> lowUsage}
    trans q4 { mild -> medUsage}
    trans q5 { mild -> hiUsage}
    trans q6 { cold -> lowUsage}
    trans q7 { cold -> medUsage}
    trans q8 { cold -> hiUsage}
    // End of configuration -> INIT
    trans z3 { lowUsage -> INIT }
    trans z4 { medUsage -> INIT }
    trans z5 { hiUsage -> INIT }
    // Enums get assigned INIT -> base - simulation begins
    trans t0 { INIT -> base }
    trans t1 { base -> base where (heatingState == #OFF); }

    //                                      ********** HEATING **********

    // Heating Process
    
    // Heating states progression
    trans ht2 { heating -> h1 where (currentTempSmallRoom >= smallRoomTarget - tempTolerance && currentTempSmallRoom <= smallRoomTarget + tempTolerance); }
    trans ht3 { h1 -> h2 where (currentTempMediumRoom >= mediumRoomTarget - tempTolerance && currentTempMediumRoom <= mediumRoomTarget + tempTolerance); } 
    trans ht4 { h2 -> h3 where (currentTempLargeRoom >= largeRoomTarget - tempTolerance && currentTempLargeRoom <= largeRoomTarget + tempTolerance); } 
    trans ht5 { h3 -> h4 where (currentTempLargeRoom > largeRoomTarget + tempTolerance); } 
    // Self Transitions
    trans ht1 { heating -> heating where (currentTempSmallRoom < smallRoomTarget - tempTolerance); }
    trans ht6 { h1 -> h1 where (currentTempMediumRoom < mediumRoomTarget - tempTolerance); }                  
    trans ht7 { h2 -> h2 where (currentTempLargeRoom < largeRoomTarget - tempTolerance); }                  
    trans ht8 { h3 -> h3 where (currentTempLargeRoom < largeRoomTarget + tempTolerance); }    
    trans ht9 { h4 -> h4 where (currentTempSmallRoom > smallRoomTarget + tempTolerance && 
                               currentTempMediumRoom > mediumRoomTarget + tempTolerance&& 
                               currentTempLargeRoom > largeRoomTarget + tempTolerance); }  
    

    // Heating -> System Off
    trans ht10  { heating -> heatingOff where (heatingState == #ON); } 
    trans ht11  { h1 -> heatingOff where (heatingState == #ON); }
    trans ht12  { h2 -> heatingOff where (heatingState == #ON); }
    trans ht13 { h3 -> heatingOff where (heatingState == #ON); }
    trans ht14 { h4 -> heatingOff where (heatingState == #ON); }

    // System On -> Heating
    trans ht15 { heatingOn -> heating where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW
    );}
    trans ht16 { heatingOn -> h1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW
    );}
    trans ht17 { heatingOn -> h2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW
    );}
    trans ht18 { heatingOn -> h3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET
    );}
    trans ht19 { heatingOn -> h4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE
    );}

    //                                      ********** COOLING **********
    // Cooling Process
    trans cl1 { c4 -> c3   where (currentTempLargeRoom > largeRoomTarget - tempTolerance && currentTempLargeRoom <= largeRoomTarget + tempTolerance); }
    trans cl2 { c3 -> c2   where (currentTempMediumRoom > mediumRoomTarget - tempTolerance && currentTempMediumRoom <= largeRoomTarget + tempTolerance); }
    trans cl3 { c2 -> c1   where (currentTempSmallRoom > smallRoomTarget - tempTolerance && currentTempSmallRoom <= smallRoomTarget + tempTolerance); }
    trans cl4 { c1 -> base where (currentTempSmallRoom < smallRoomTarget &&
                                    currentTempMediumRoom < mediumRoomTarget &&
                                    currentTempLargeRoom < largeRoomTarget ); }
    // Self Transitions
    trans cl5 { c4 -> c4 where (currentTempLargeRoom > largeRoomTarget + tempTolerance); }
    trans cl6 { c3 -> c3 where (currentTempMediumRoom > mediumRoomTarget + tempTolerance); }
    trans cl7 { c2 -> c2 where (currentTempSmallRoom > smallRoomTarget + tempTolerance); }
    trans cl8 { c1 -> c1 where (currentTempSmallRoom < smallRoomTarget - tempTolerance); }

    // Cooling -> System On
    trans cl9 { base -> heatingOn where (heatingState == #OFF ); }
    trans cl10 { c1 -> heatingOn where (heatingState == #OFF ); }
    trans cl11 { c2 -> heatingOn where (heatingState == #OFF ); }
    trans cl12 { c3 -> heatingOn where (heatingState == #OFF ); }
    trans cl13 { c4 -> heatingOn where (heatingState == #OFF ); }

    // System Off -> Cooling
    trans cl14 { heatingOff -> base where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW
    );}
    trans cl15 { heatingOff -> c1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW
    );}
    trans cl16 { heatingOff -> c2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW
    );}
    trans cl17 { heatingOff -> c3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET
    );}
    trans cl18 { heatingOff -> c4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE
    );}

    //                                      ********** LIGHTING **********

    // Turn lights1 ON
    trans ls1 { heating -> lightsOn1 where (lightsState1 == #OFF); }
    trans ls2 { h1 -> lightsOn1      where (lightsState1 == #OFF); }
    trans ls3 { h2 -> lightsOn1      where (lightsState1 == #OFF); }
    trans ls4 { h3 -> lightsOn1      where (lightsState1 == #OFF); }
    trans ls5 { h4 -> lightsOn1      where (lightsState1 == #OFF); }
    trans ls6 { c4 -> lightsOn1      where (lightsState1 == #OFF); }
    trans ls7 { c3 -> lightsOn1      where (lightsState1 == #OFF); }
    trans ls8 { c2 -> lightsOn1      where (lightsState1 == #OFF); }
    trans ls9 { c1 -> lightsOn1      where (lightsState1 == #OFF); }
    trans ls10 { base -> lightsOn1    where (lightsState1 == #OFF); }

    // State memory after turning lights1 on
    trans ls11 { lightsOn1 -> heating where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ls12 { lightsOn1 -> h1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW
    );}
    trans ls13 { lightsOn1 -> h2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ls14 { lightsOn1 -> h3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET &&
        heatingState == #ON
    );}
    trans ls15 { lightsOn1 -> h4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE &&
        heatingState == #ON
    );}
    trans ls16 { lightsOn1 -> base where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ls17 { lightsOn1 -> c1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ls18 { lightsOn1 -> c2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ls19 { lightsOn1 -> c3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET &&
        heatingState == #OFF
    );}
    trans ls20 { lightsOn1 -> c4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE &&
        heatingState == #OFF
    );}

    // Turn lights1 OFF
    trans ls21 { heating -> lightsOff1 where (lightsState1 == #ON); }
    trans ls22 { h1 -> lightsOff1      where (lightsState1 == #ON); }
    trans ls23 { h2 -> lightsOff1      where (lightsState1 == #ON); }
    trans ls24 { h3 -> lightsOff1      where (lightsState1 == #ON); }
    trans ls25 { h4 -> lightsOff1      where (lightsState1 == #ON); }
    trans ls26 { c4 -> lightsOff1      where (lightsState1 == #ON); }
    trans ls27 { c3 -> lightsOff1      where (lightsState1 == #ON); }
    trans ls28 { c2 -> lightsOff1      where (lightsState1 == #ON); }
    trans ls29 { c1 -> lightsOff1      where (lightsState1 == #ON); }
    trans ls30 { base -> lightsOff1    where (lightsState1 == #ON); }

    trans ls31 { lightsOff1 -> heating where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ls32 { lightsOff1 -> h1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ls33 { lightsOff1 -> h2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ls34 { lightsOff1 -> h3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET &&
        heatingState == #ON
    );}
    trans ls35 { lightsOff1 -> h4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE &&
        heatingState == #ON
    );}
    trans ls36 { lightsOff1 -> base where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ls37 { lightsOff1 -> c1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ls38 { lightsOff1 -> c2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ls39 { lightsOff1 -> c3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET &&
        heatingState == #OFF
    );}
    trans ls40 { lightsOff1 -> c4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE &&
        heatingState == #OFF
    );}

    // Turn lights2 ON
    trans ls41 { heating -> lightsOn2 where (lightsState2 == #OFF); }
    trans ls42 { h1 -> lightsOn2      where (lightsState2 == #OFF); }
    trans ls43 { h2 -> lightsOn2      where (lightsState2 == #OFF); }
    trans ls44 { h3 -> lightsOn2      where (lightsState2 == #OFF); }
    trans ls45 { h4 -> lightsOn2      where (lightsState2 == #OFF); }
    trans ls46 { c4 -> lightsOn2      where (lightsState2 == #OFF); }
    trans ls47 { c3 -> lightsOn2      where (lightsState2 == #OFF); }
    trans ls48 { c2 -> lightsOn2      where (lightsState2 == #OFF); }
    trans ls49 { c1 -> lightsOn2      where (lightsState2 == #OFF); }
    trans ls50 { base -> lightsOn2    where (lightsState2 == #OFF); } 
    // State memory after turning lights2 on
    trans ls51 { lightsOn2 -> heating where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ls52 { lightsOn2 -> h1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW
    );}
    trans ls53 { lightsOn2 -> h2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ls54 { lightsOn2 -> h3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET &&
        heatingState == #ON
    );}
    trans ls55 { lightsOn2 -> h4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE &&
        heatingState == #ON
    );}
    trans ls56 { lightsOn2 -> base where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ls57 { lightsOn2 -> c1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ls58 { lightsOn2 -> c2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ls59 { lightsOn2 -> c3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET &&
        heatingState == #OFF
    );}
    trans ls60 { lightsOn2 -> c4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE &&
        heatingState == #OFF
    );}

    // Turn lights2 OFF
    trans ls70 { heating -> lightsOff2 where (lightsState2 == #ON); }
    trans ls71 { h1 -> lightsOff2      where (lightsState2 == #ON); }
    trans ls72 { h2 -> lightsOff2      where (lightsState2 == #ON); }
    trans ls73 { h3 -> lightsOff2      where (lightsState2 == #ON); }
    trans ls74 { h4 -> lightsOff2      where (lightsState2 == #ON); }
    trans ls75 { c4 -> lightsOff2      where (lightsState2 == #ON); }
    trans ls76 { c3 -> lightsOff2      where (lightsState2 == #ON); }
    trans ls77 { c2 -> lightsOff2      where (lightsState2 == #ON); }
    trans ls78 { c1 -> lightsOff2      where (lightsState2 == #ON); }
    trans ls79 { base -> lightsOff2    where (lightsState2 == #ON); }

    trans ls80 { lightsOff2 -> heating where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ls81 { lightsOff2 -> h1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ls82 { lightsOff2 -> h2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ls83 { lightsOff2 -> h3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET &&
        heatingState == #ON
    );}
    trans ls84 { lightsOff2 -> h4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE &&
        heatingState == #ON
    );}
    trans ls85 { lightsOff2 -> base where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ls86 { lightsOff2 -> c1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ls87 { lightsOff2 -> c2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ls88 { lightsOff2 -> c3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET &&
        heatingState == #OFF
    );}
    trans ls89 { lightsOff2 -> c4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE &&
        heatingState == #OFF
    );}
    
    //                                      ********** APPLIANCES **********

    // Turn appliance1 ON
    trans ap1 { heating -> applianceOn1 where (applianceState1 == #OFF); }
    trans ap2 { h1 -> applianceOn1      where (applianceState1 == #OFF); }
    trans ap3 { h2 -> applianceOn1      where (applianceState1 == #OFF); }
    trans ap4 { h3 -> applianceOn1      where (applianceState1 == #OFF); }
    trans ap5 { h4 -> applianceOn1      where (applianceState1 == #OFF); }
    trans ap6 { c4 -> applianceOn1      where (applianceState1 == #OFF); }
    trans ap7 { c3 -> applianceOn1      where (applianceState1 == #OFF); }
    trans ap8 { c2 -> applianceOn1      where (applianceState1 == #OFF); }
    trans ap9 { c1 -> applianceOn1      where (applianceState1 == #OFF); }
    trans ap10 { base -> applianceOn1    where (applianceState1 == #OFF); }

    // State memory after turning appliance1 on
    trans ap11 { applianceOn1 -> heating where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ap12 { applianceOn1 -> h1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW
    );}
    trans ap13 { applianceOn1 -> h2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ap14 { applianceOn1 -> h3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET &&
        heatingState == #ON
    );}
    trans ap15 { applianceOn1 -> h4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE &&
        heatingState == #ON
    );}
    trans ap16 { applianceOn1 -> base where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ap17 { applianceOn1 -> c1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ap18 { applianceOn1 -> c2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ap19 { applianceOn1 -> c3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET &&
        heatingState == #OFF
    );}
    trans ap20 { applianceOn1 -> c4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE &&
        heatingState == #OFF
    );}

    // Turn appliance1 OFF
    trans ap21 { heating -> applianceOff1 where (applianceState1 == #ON); }
    trans ap22 { h1 -> applianceOff1      where (applianceState1 == #ON); }
    trans ap23 { h2 -> applianceOff1      where (applianceState1 == #ON); }
    trans ap24 { h3 -> applianceOff1      where (applianceState1 == #ON); }
    trans ap25 { h4 -> applianceOff1      where (applianceState1 == #ON); }
    trans ap26 { c4 -> applianceOff1      where (applianceState1 == #ON); }
    trans ap27 { c3 -> applianceOff1      where (applianceState1 == #ON); }
    trans ap28 { c2 -> applianceOff1      where (applianceState1 == #ON); }
    trans ap29 { c1 -> applianceOff1      where (applianceState1 == #ON); }
    trans ap30 { base -> applianceOff1    where (applianceState1 == #ON); }

    trans ap31 { applianceOff1 -> heating where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ap32 { applianceOff1 -> h1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ap33 { applianceOff1 -> h2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ap34 { applianceOff1 -> h3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET &&
        heatingState == #ON
    );}
    trans ap35 { applianceOff1 -> h4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE &&
        heatingState == #ON
    );}
    trans ap36 { applianceOff1 -> base where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ap37 { applianceOff1 -> c1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ap38 { applianceOff1 -> c2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ap39 { applianceOff1 -> c3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET &&
        heatingState == #OFF
    );}
    trans ap40 { applianceOff1 -> c4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE &&
        heatingState == #OFF
    );}

    // Turn appliance2 ON
    trans ap41 { heating -> applianceOn2 where (applianceState2 == #OFF); }
    trans ap42 { h1 -> applianceOn2      where (applianceState2 == #OFF); }
    trans ap43 { h2 -> applianceOn2      where (applianceState2 == #OFF); }
    trans ap44 { h3 -> applianceOn2      where (applianceState2 == #OFF); }
    trans ap45 { h4 -> applianceOn2      where (applianceState2 == #OFF); }
    trans ap46 { c4 -> applianceOn2      where (applianceState2 == #OFF); }
    trans ap47 { c3 -> applianceOn2      where (applianceState2 == #OFF); }
    trans ap48 { c2 -> applianceOn2      where (applianceState2 == #OFF); }
    trans ap49 { c1 -> applianceOn2      where (applianceState2 == #OFF); }
    trans ap50 { base -> applianceOn2    where (applianceState2 == #OFF); } 

    // State memory after turning appliance2 on
    trans ap51 { applianceOn2 -> heating where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ap52 { applianceOn2 -> h1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW
    );}
    trans ap53 { applianceOn2 -> h2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ap54 { applianceOn2 -> h3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET &&
        heatingState == #ON
    );}
    trans ap55 { applianceOn2 -> h4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE &&
        heatingState == #ON
    );}
    trans ap56 { applianceOn2 -> base where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ap57 { applianceOn2 -> c1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ap58 { applianceOn2 -> c2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ap59 { applianceOn2 -> c3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET &&
        heatingState == #OFF
    );}
    trans ap60 { applianceOn2 -> c4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE &&
        heatingState == #OFF
    );}

    // Turn appliance2 OFF
    trans ap70 { heating -> applianceOff2 where (applianceState2 == #ON); }
    trans ap71 { h1 -> applianceOff2      where (applianceState2 == #ON); }
    trans ap72 { h2 -> applianceOff2      where (applianceState2 == #ON); }
    trans ap73 { h3 -> applianceOff2      where (applianceState2 == #ON); }
    trans ap74 { h4 -> applianceOff2      where (applianceState2 == #ON); }
    trans ap75 { c4 -> applianceOff2      where (applianceState2 == #ON); }
    trans ap76 { c3 -> applianceOff2      where (applianceState2 == #ON); }
    trans ap77 { c2 -> applianceOff2      where (applianceState2 == #ON); }
    trans ap78 { c1 -> applianceOff2      where (applianceState2 == #ON); }
    trans ap79 { base -> applianceOff2    where (applianceState2 == #ON); }

    trans ap80 { applianceOff2 -> heating where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ap81 { applianceOff2 -> h1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ap82 { applianceOff2 -> h2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW &&
        heatingState == #ON
    );}
    trans ap83 { applianceOff2 -> h3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET &&
        heatingState == #ON
    );}
    trans ap84 { applianceOff2 -> h4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE &&
        heatingState == #ON
    );}
    trans ap85 { applianceOff2 -> base where (
        smallRoomState == #BELOW &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ap86 { applianceOff2 -> c1 where (
        smallRoomState == #TARGET &&
        mediumRoomState == #BELOW &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ap87 { applianceOff2 -> c2 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #TARGET &&
        largeRoomState == #BELOW &&
        heatingState == #OFF
    );}
    trans ap88 { applianceOff2 -> c3 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #TARGET &&
        heatingState == #OFF
    );}
    trans ap89 { applianceOff2 -> c4 where (
        smallRoomState == #ABOVE &&
        mediumRoomState == #ABOVE &&
        largeRoomState == #ABOVE &&
        heatingState == #OFF
    );}
    
    goal {

        let residentialHome = entry -> smallBuilding -> medInsulation -> lowOccupancy -> pumpHeating -> LED -> mild -> medUsage -> INIT;

        assert (lightsState1 == #OFF && applianceState2 == #OFF) && (energyUsed < 2.00);

        // Check if path exists
        check for 20 condition (residentialHome && !h4 && heatingOn^{0:2} && heatingOff^{0:2} && lightsOn1^{0:1} && applianceOn1^{0:1}) reach (h3) 

        // Enumerate over paths to find optimisation (memory instenive)
        //enumerate for 20 condition (residentialHome && !h4 && heatingOn^{0:2} && heatingOff^{0:2} && lightsOn1^{0:1} && applianceOn1^{0:1}) reach (h3)
    }

}   
